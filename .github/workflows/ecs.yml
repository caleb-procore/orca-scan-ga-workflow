name: Docker Image Build -> Orca Scan -> Image Push to AWS ECR -> ECS Deploy

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      should_deploy:
        required: false
        type: boolean
        default: false
        description: |
          Determines whether to push Docker image (may want to build and scan only manually).
          For testing of orca image scanning on any developer feature branch without deploying.
          Should be set to true after testing and before PR merge.
          Can also be tested locally with Orca CLI.
      app-directory:
        required: false
        type: string
        default: "."
        description: Used to specify the path to the application directory.
      oidc-role-arn:
        required: true
        type: string
        description: Used to specify the OIDC role ARN.
      ecs-cluster-name:
        required: true
        type: string
        description: Used to specify the ECS cluster name.
      ecs-service-name:
        required: true
        type: string
        description: Used to specify the ECS service name.
      ecs-task-definition-name:
        required: true
        type: string
        description: Used to specify the ECS task definition name.
      ecs-container-name:
        required: true
        type: string
        description: Used to specify the ECS container name.
      ecr-repo-name:
        required: true
        type: string
        description: Used to specify the ECR repository name.
      ecr-image-tag-param:
        required: false
        type: string
        description: Used to specify the SSM parameter for the ECR image tag.
        # default: "/procore-io-platform/dev/procore-portal-backend/ecr-image-tag"
      region:
        required: false
        type: string
        default: us-west-2
        description: Used to specify the AWS region.

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.oidc-role-arn }}
          role-session-name: github-action
          aws-region: ${{ inputs.region }}

      - name: Login to Amazon ECR
        # if: ${{ needs.setup.outputs.ACTION_TYPE == 'build_scan_deploy' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Docker tag and push image to Amazon ECR
        id: tag-and-push-image
        # if: ${{ inputs.should_deploy == 'true' && success() && needs.setup.outputs.ACTION_TYPE == 'build_scan_deploy' }}
        if: ${{ inputs.should_deploy == 'true' && success() }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: ${{ inputs.ecr-repo-name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag $ECR_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          # aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${{ needs.setup.outputs.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com
          # docker tag ${{ needs.setup.outputs.APP_NAME }}:${{ github.sha }} ${{ needs.setup.outputs.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/${{ needs.setup.outputs.APP_NAME }}:${{ github.sha }}
          # docker push ${{ needs.setup.outputs.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/${{ needs.setup.outputs.APP_NAME }}:${{ github.sha }}

      - name: Print Docker Image and ECR Details
        run: |
          echo "Docker Image: ${{ needs.setup.outputs.APP_NAME }}:${{ github.sha }}"
          echo "ECR Repository: ${{ needs.setup.outputs.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/${{ needs.setup.outputs.APP_NAME }}"

      - name: Download task definition
        if: ${{ inputs.should_deploy == 'true' && success() }}
        id: download-task-def
        env:
          TASK_DEFINITION_NAME: ${{ inputs.ecs-task-definition-name }}
        run: |
          aws ecs describe-task-definition \
            --task-definition $TASK_DEFINITION_NAME \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the SSM parameter
        if: ${{ inputs.should_deploy == 'true' && success() }}
        env:
          ECR_IMAGE_TAG_PARAM: ${{ inputs.ecr-image-tag-param }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ssm put-parameter \
            --name $ECR_IMAGE_TAG_PARAM \
            --value $IMAGE_TAG \
            --overwrite

      - name: Fill in the new image ID in the Amazon ECS task definition
        if: ${{ inputs.should_deploy == 'true' && success() }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.ecs-container-name }}
          image: ${{ steps.tag-and-push-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        if: ${{ inputs.should_deploy == 'true' && success() }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.ecs-service-name }}
          cluster: ${{ inputs.ecs-cluster-name }}
          wait-for-service-stability: true