#################################################
#
# Summary
# On a PR, simulate a merge (no commit), build and scan the Docker image only
# On a merge, build, scan and deploy the Docker image to ECR.
# 
# Pre-requisites: 
#
# 1. IAM OIDC Role for Github Actions in the target AWS account.
#
# 2. SSM Parameters for the following:
#     ECR Repo Name
#     ECR Image Tag
#     ECS Cluster Name
#     ECS Service Name
#     ECS Task Definition Name
#     ECS Container Name
#
#################################################

name: Continuous Deployment Workflow | Set Environment

on:
  workflow_dispatch:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches:
      - main
      - staging
      - develop

permissions:
  id-token: write # need this for OIDC
  contents: read # need this for actions/checkout
  packages: write

env:
  AWS_ACCT_ID_DEV: 785368447960
  AWS_ACCT_ID_STG: 785368447960
  AWS_ACCT_ID_PROD: 723214535755
  AWS_REGION: us-west-2
  OIDC_ROLE_ARN_DEV: arn:aws:iam::785368447960:role/github-actions-oidc-role
  OIDC_ROLE_ARN_STG: arn:aws:iam::785368447960:role/github-actions-oidc-role
  OIDC_ROLE_ARN_PROD: arn:aws:iam::723214535755:role/github-actions-oidc-role
  #  OIDC_ROLE_ARN_DEV: arn:aws:iam::${{ env.AWS_ACCT_ID_DEV }}:role/github-actions-oidc-role
  #  OIDC_ROLE_ARN_STG: arn:aws:iam::${{ env.AWS_ACCT_ID_STG }}:role/github-actions-oidc-role
  #  OIDC_ROLE_ARN_PROD: arn:aws:iam::${{ env.AWS_ACCT_ID_PROD }}:role/github-actions-oidc-role
  # https://us-west-2.console.aws.amazon.com/ecr/repositories/private/785368447960/caleb-procore/orca-scan-ga-workflow?region=us-west-2
  APP_NAME_DEV: caleb-procore
  APP_NAME_STG: caleb-procore
  APP_NAME_PROD: caleb-procore
  SERVICE_NAME_DEV: orca-scan-ga-workflow
  SERVICE_NAME_STG: orca-scan-ga-workflow
  SERVICE_NAME_PROD: orca-scan-ga-workflow
  APP_DIRECTORY: src
  DOCKERFILE_PATH: src/gademo/Dockerfile
  ORCA_API_TOKEN: ${{ secrets.ORCA_API_TOKEN }}

jobs:
  no-op:
    name: No Operation
    runs-on: ubuntu-latest
    steps:
      - name: Do nothing
        run: echo "No operation performed"
  
  setup:
    name: Set Env Params
    runs-on: ubuntu-latest
    steps:
      - name: Set deployment environment based on Git branch
        id: set_environment
        run: |
          case "$GITHUB_REF" in
          "refs/heads/main")
            ENV="prod"
            # todo: construct here instead of hard code above
            OIDC_ROLE_ARN=${{ env.OIDC_ROLE_ARN_PROD }}
            APP_NAME=${{ env.APP_NAME_PROD }}
            SERVICE_NAME=${{ env.SERVICE_NAME_PROD }}
            AWS_ACCT_ID=${{ env.AWS_ACCT_ID_PROD }}
            ;;
          "refs/heads/staging")
            ENV="stg"
            # todo: construct here instead of hard code above
            OIDC_ROLE_ARN=${{ env.OIDC_ROLE_ARN_STG }}
            APP_NAME=${{ env.APP_NAME_STG }}
            SERVICE_NAME=${{ env.SERVICE_NAME_STG }}
            AWS_ACCT_ID=${{ env.AWS_ACCT_ID_STG }}
            ;; 
          *)
            ENV="dev"
            # todo: construct here instead of hard code above
            OIDC_ROLE_ARN=${{ env.OIDC_ROLE_ARN_DEV }}
            APP_NAME=${{ env.APP_NAME_DEV }}
            SERVICE_NAME=${{ env.SERVICE_NAME_DEV }}
            AWS_ACCT_ID=${{ env.AWS_ACCT_ID_DEV }}
            ;;
          esac 

          echo "ENV=$ENV" | tee -a "$GITHUB_OUTPUT"
          echo "OIDC_ROLE_ARN=$OIDC_ROLE_ARN" | tee -a "$GITHUB_OUTPUT"
          echo "APP_NAME=$APP_NAME" | tee -a "$GITHUB_OUTPUT"
          echo "SERVICE_NAME=$SERVICE_NAME" | tee -a "$GITHUB_OUTPUT"
          echo "AWS_ACCT_ID=$AWS_ACCT_ID" | tee -a "$GITHUB_OUTPUT"
    
    outputs:
      ENV: ${{ steps.set_environment.outputs.ENV }}
      OIDC_ROLE_ARN: ${{ steps.set_environment.outputs.OIDC_ROLE_ARN }}
      APP_NAME: ${{ steps.set_environment.outputs.APP_NAME }}
      SERVICE_NAME: ${{ steps.set_environment.outputs.SERVICE_NAME }}
      AWS_ACCT_ID: ${{ steps.set_environment.outputs.AWS_ACCT_ID }}
      APP_DIRECTORY: ${{ env.APP_DIRECTORY }}
      DOCKERFILE_PATH: ${{ env.DOCKERFILE_PATH }}
  
  set-ecr-img-params:
    needs: [ setup ]
    runs-on: ubuntu-latest
    name: Set ECR Params
    outputs:
      IMG_REG: ${{ steps.set-ecr-params.outputs.IMG_REG }}
      IMG_TAG: ${{ steps.set-ecr-params.outputs.IMG_TAG }}
      IMG_SRC: ${{ steps.set-ecr-params.outputs.IMG_SRC }}
      IMG_TGT: ${{ steps.set-ecr-params.outputs.IMG_TGT }}
    steps:
      - name: Set ECR Params
        id: set-ecr-params
        run: |
          # IMG_REG="${AWS_ACCT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          IMG_REG="${{needs.setup.outputs.aws_acct_id}}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          IMG_TAG="latest"
          IMG_SRC=caleb-procore/orca-scan-ga-workflow:${IMG_TAG}
          IMG_TGT=${IMG_REG}/${IMG_SRC}
          echo "IMG_REG=$IMG_REG" | tee -a "$GITHUB_OUTPUT"
          echo "IMG_TAG=$IMG_TAG" | tee -a "$GITHUB_OUTPUT"
          echo "IMG_SRC=$IMG_SRC" | tee -a "$GITHUB_OUTPUT"
          echo "IMG_TGT=$IMG_TGT" | tee -a "$GITHUB_OUTPUT"
  
  set-ecs-params:
    needs: [ setup ]
    runs-on: ubuntu-latest
    name: Set ECS & SSM Parameters
    outputs:
      ECR_REPO_NAME: ${{ steps.ecs.outputs.ECR_REPO_NAME }}
      ECR_IMAGE_TAG: ${{ steps.ecs.outputs.ECR_IMAGE_TAG }}
      ECS_CLUSTER_NAME: ${{ steps.ecs.outputs.ECS_CLUSTER_NAME }}
      ECS_SERVICE_NAME: ${{ steps.ecs.outputs.ECS_SERVICE_NAME }}
      ECS_TASK_DEFINITION_NAME: "${{ steps.ecs.outputs.ECS_TASK_DEFINITION_NAME }}"
      ECS_CONTAINER_NAME: ${{ steps.ecs.outputs.ECS_CONTAINER_NAME }}
    steps:
      - name: Set ECS Params
        id: ecs
        env:
          APP_NAME: ${{ needs.setup.outputs.APP_NAME }}
          ENV: ${{ needs.setup.outputs.ENV }}
          SERVICE_NAME: ${{ needs.setup.outputs.SERVICE_NAME }}
        run: |
          aws --version
          echo APP_NAME=$APP_NAME
          echo ENV=$ENV
          echo SERVICE_NAME=$SERVICE_NAME
          
          ECR_REPO_NAME_PARAM="/${APP_NAME}/${ENV}/${SERVICE_NAME}/ecr-repo-name"
          ECR_IMAGE_TAG_PARAM="/${APP_NAME}/${ENV}/${SERVICE_NAME}/ecr-image-tag"
          
          ECS_CLUSTER_NAME_PARAM="/${APP_NAME}/${ENV}/${SERVICE_NAME}/ecs-cluster-name"
          ECS_SERVICE_NAME_PARAM="/${APP_NAME}/${ENV}/${SERVICE_NAME}/ecs-service-name"
          ECS_TASK_DEFINITION_NAME_PARAM="/${APP_NAME}/${ENV}/${SERVICE_NAME}/ecs-task-definition-name"
          ECS_CONTAINER_NAME_PARAM="/${APP_NAME}/${ENV}/${SERVICE_NAME}/ecs-container-name"
          
          ##### Save ECS Parameters Github Outputs #####
          ##### ecs.yaml workflow reads from this
          echo "ECR_REPO_NAME_PARAM=$ECR_REPO_NAME_PARAM" | tee -a "$GITHUB_OUTPUT"
          echo "ECR_IMAGE_TAG=$ECR_IMAGE_TAG" | tee -a "$GITHUB_OUTPUT"
          echo "ECS_CLUSTER_NAME_PARAM=$ECS_CLUSTER_NAME_PARAM" | tee -a "$GITHUB_OUTPUT"
          echo "ECS_SERVICE_NAME_PARAM=$ECS_SERVICE_NAME_PARAM" | tee -a "$GITHUB_OUTPUT"
          echo "ECS_TASK_DEFINITION_NAME_PARAM=$ECS_TASK_DEFINITION_NAME_PARAM" | tee -a "$GITHUB_OUTPUT"
          echo "ECS_CONTAINER_NAME_PARAM=$ECS_CONTAINER_NAME_PARAM" | tee -a "$GITHUB_OUTPUT"

          ##### Get SSM Parameters #####
          ECR_REPO_NAME=$(aws ssm get-parameter --name ${ECR_REPO_NAME_PARAM} --output json | jq -r ".Parameter.Value")
          ECS_CLUSTER_NAME=$(aws ssm get-parameter --name ${ECS_CLUSTER_NAME_PARAM} --output json | jq -r ".Parameter.Value")
          ECS_SERVICE_NAME=$(aws ssm get-parameter --name ${ECS_SERVICE_NAME_PARAM} --output json | jq -r ".Parameter.Value")
          ECS_TASK_DEFINITION_NAME=$(aws ssm get-parameter --name ${ECS_TASK_DEFINITION_NAME_PARAM} --output json | jq -r ".Parameter.Value")
          ECS_CONTAINER_NAME=$(aws ssm get-parameter --name ${ECS_CONTAINER_NAME_PARAM} --output json | jq -r ".Parameter.Value")

          ##### Save SSM Parameter Values as Github Outputs #####
          echo "ECR_REPO_NAME=$ECR_REPO_NAME" | tee -a "$GITHUB_OUTPUT"
          echo "ECS_IMAGE_TAG=$ECS_IMAGE_TAG" | tee -a "$GITHUB_OUTPUT"
          echo "ECS_CLUSTER_NAME=$ECS_CLUSTER_NAME" | tee -a "$GITHUB_OUTPUT"
          echo "ECS_SERVICE_NAME=$ECS_SERVICE_NAME" | tee -a "$GITHUB_OUTPUT"
          echo "ECS_TASK_DEFINITION_NAME=$ECS_TASK_DEFINITION_NAME" | tee -a "$GITHUB_OUTPUT"
          echo "ECS_CONTAINER_NAME=$ECS_CONTAINER_NAME" | tee -a "$GITHUB_OUTPUT"

  # on PR: simulate a merge and build image, scan
  # merge: build image and scan on actual merge 
  # New Step - Call build-image-scan.yml based on Action Type
#  build-image-scan:
#    needs: [ set-params ]
#    name: Build Image Scan
#    runs-on: ubuntu-latest
#    steps:
#      - name: Determine Action Type
#        id: determine_action_type
#        run: |
#          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
#            ACTION_TYPE="build_scan_only"
#          elif [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
#            ACTION_TYPE="build_scan_deploy"
#          fi
#          echo "ACTION_TYPE=$ACTION_TYPE" | tee -a "$GITHUB_OUTPUT"

#      - name: Trigger Build Image Scan Workflow
#        uses: .github/workflows/build-image-scan.yml
#        with:
#          action-type: ${{ steps.determine_action_type.outputs.ACTION_TYPE }}
#          oidc-role-arn: ${{ needs.setup.outputs.OIDC_ROLE_ARN }}
#          aws-account-id: ${{ needs.setup.outputs.AWS_ACCT_ID }}
#          dockerfile-path: ${{ needs.getparams.outputs.DOCKERFILE_PATH }}
#          app-directory: ${{ needs.setup.outputs.APP_DIRECTORY }}
#          app-name: ${{ needs.setup.outputs.APP_NAME }}
#          service-name: ${{ needs.setup.outputs.SERVICE_NAME }}
#          env: ${{ needs.setup.outputs.ENV }}

#  deploy-ecs-api-container:
#    # if: github.event_name == 'push' && github.ref =~ 'refs/heads/(main|develop|staging)'
#    if: false
#    #    if: github.event_name == 'push' && (
#    #      github.ref == 'refs/heads/main' ||
#    #      github.ref == 'refs/heads/develop' ||
#    #      github.ref == 'refs/heads/staging'
#    #      )
#    needs: [ build-image-scan ]
#    name: Deploy ECS Container
#    uses: ./.github/workflows/ecs.yml
#    with:
#      oidc-role-arn: ${{ needs.setup.outputs.OIDC_ROLE_ARN }}
#      ecr-repo-name: ${{ needs.getparams.outputs.ECR_REPO_NAME }}
#      ecs-cluster-name: ${{ needs.getparams.outputs.ECS_CLUSTER_NAME }}
#      ecs-service-name: ${{ needs.getparams.outputs.ECS_SERVICE_NAME }}
#      ecs-task-definition-name: ${{ needs.getparams.outputs.ECS_TASK_DEFINITION_NAME }}
#      ecs-container-name: ${{ needs.getparams.outputs.ECS_CONTAINER_NAME }}
#      app-directory: ${{ needs.getparams.outputs.APP_DIRECTORY }}
#      dockerfile-path: ${{ needs.getparams.outputs.DOCKERFILE_PATH }}
#      ecr-image-tag-param: "${{ needs.getparams.outputs.ECR_IMAGE_TAG}}"
#      # app-directory: ${{ env.APP_DIRECTORY }}
#      # dockerfile-path: ${{ env.DOCKERFILE_PATH }}
