# on a PR of "develop" <== "feature", do a docker image build and orca scan

name: Build and Scan Docker Image

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      action-type:
        required: true
        type: string
      aws-account-id:
        required: true
        type: string
      app-directory:
        required: true
        type: string
      oidc-role-arn:
        required: true
        type: string
      app-name:
        required: true
        type: string
      service-name:
        required: true
        type: string
      img-src:
        required: true
        type: string
      dockerfile-path:
        required: true
        type: string

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  # no-op:
  #   name: No Operation
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Do nothing
  #       id: noop
  #       run: echo "No operation performed"
  
  build-scan:
    name: Build and Scan Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch of the pull request (dev, staging, main)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          fetch-depth: 0

      - name: Git Status
        run: |
          git status

      - name: Fetch all branches
        run: |
          git fetch --all
          git status

      - name: Checkout the latest commit from the head of pull request
        if: github.event_name == 'pull_request'
        run: |
          git checkout ${{ github.event.pull_request.head.ref }}
          git status

      - name: PR - Build Docker Image on simulated merge
        id: pr-build-image
        if: github.event_name == 'pull_request'
        run: |
          # git fetch origin
          git merge --no-ff ${{ github.event.pull_request.head.sha }}
          # docker build --no-cache --platform=linux/amd64 -t ${DOCKER_IMG_NAME} -f ${DOCKERFILE} .
          # docker build -t ${{ inputs.img_src }}:${{ github.sha }}-f ${{ inputs.dockerfile-path }} ${{ inputs.app-directory }}
          docker build -t ${{ inputs.img-src }}:${{ github.sha }} -f ${{ inputs.dockerfile-path }} ${{ inputs.app-directory }}

#      - name: Build Docker Image on real merge to env branch (main, staging, develop)
#        if: github.event_name == 'push'
#        run: |
#          echo "DOCKERFILE_PATH | ${{ env.DOCKERFILE_PATH }}"
#          echo "ECR_REPO_NAME | $ECR_REPO_NAME"
#          echo "IMG_TAG | $IMG_TAG"
#          # docker build -t ${{ needs.setup.outputs.APP_NAME }}:${{ github.sha }} -f ${{ env.DOCKERFILE_PATH }} ${{ env.APP_DIRECTORY }}
#          docker build -t $ECR_REPO_NAME:$IMAGE_TAG -f ${{ env.DOCKERFILE_PATH }}
#
#      - name: Install Orca CLI
#        run: |
#          curl -L https://download.orcasecurity.io/orca-cli-linux -o /usr/local/bin/orca
#          chmod +x /usr/local/bin/orca
#
#      - name: Orca Image Scan
#        id: orca-image-scan
#        # uses: orcasecurity/orca-action@v1
#        #   with:
#        #     api-key: ${{ secrets.ORCA_API_TOKEN }}
#        #     image: ${{ inputs.app-name }}:${{ github.sha }}
#        run: |
#          orca scan --image $ECR_REPO_NAME:$IMAGE_TAG --key ${{ secrets.ORCA_API_TOKEN }}

#      - name: Assume OIDC Role
#        id: assume-role
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          role-to-assume: ${{ inputs.oidc-role-arn }}
#          role-session-name: github-action
#          aws-region: us-west-2

#      - name: Set Docker Build Image Tag
#        id: image-tag
#        run: |
#          IMAGE_TAG=${GITHUB_SHA}
#          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
#
#      - name: Docker build
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ inputs.aws-account-id }}.dkr.ecr.us-west-2.amazonaws.com
#          ECR_REPO: ${{ inputs.app-name }}
#          IMAGE_TAG: ${{ github.sha }}
#          DOCKER_BUILDKIT: 1
#        run: |
#          echo "ECR Registry: $ECR_REGISTRY"
#          echo "ECR Repository: $ECR_REPO"
#          echo "Image Tag: $IMAGE_TAG"
#          if [ "${{ inputs.action-type }}" == "build_scan_only" ]; then
#            echo "PR: Building Docker image and scanning on a simulated merge..."
#            git fetch origin $GITHUB_BASE_REF
#            git merge --no-commit --no-ff origin/$GITHUB_BASE_REF
#          else
#            echo "merge: Building Docker image and scanning ..."
#          fi
#          cd ${{ inputs.app-directory }}
#          docker build . -t $ECR_REPO:$IMAGE_TAG -f ${{ inputs.dockerfile-path }}