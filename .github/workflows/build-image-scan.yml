# on a PR of "develop" <== "feature", do a docker image build and orca scan

name: Build and Scan Docker Image

on:
  workflow_call:
    inputs:
      app-directory:
        required: true
        type: string
      oidc-role-arn:
        required: true
        type: string
      app-name:
        required: true
        type: string
      service-name:
        required: true
        type: string
      env:
        required: true
        type: string
      action-type:
        required: true
        type: string

jobs:
  build-scan:
    name: Build and Scan Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set Docker image tag
        id: image-tag
        run: echo "::set-output name=tag::${{ github.sha }}"

      - name: Log Action Type
        run:
          echo "Action Type: ${{ inputs['action-type'] }}"

      - name: Assume OIDC Role for AWS
        if: inputs.action-type == 'build_scan_only' || inputs.action-type == 'build_scan_deploy'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.oidc-role-arn }}
          role-session-name: github-action
          aws-region: us-west-2

      - name: Docker build
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: ${{ inputs.ecr-repo-name }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_BUILDKIT: 1
        run: |
          echo "ECR Registry: $ECR_REGISTRY"
          echo "ECR Repository: $ECR_REPO"
          echo "Image Tag: $IMAGE_TAG"
          if [ "${{ inputs.action-type }}" == "build_scan_only" ]; then
            echo "Simulating merge process..."
            git fetch origin $GITHUB_BASE_REF
            git merge --no-commit --no-ff origin/$GITHUB_BASE_REF
          else
            echo "Performing real merge..."
          fi
          cd ${{ inputs.app-directory }}
          docker build . -t $ECR_REPO:$IMAGE_TAG -f ${{ inputs.dockerfile-path }}

      - name: Scan Docker Image with Orca
        uses: orcasecurity/orca-action@v1
        env:
          ORCA_API_TOKEN: ${{ secrets.ORCA_API_TOKEN }}
        with:
          image: ${{ inputs.app-name }}:${{ steps.image-tag.outputs.tag }}
          fail-build: true